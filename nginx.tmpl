# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

# Prevent 413 Request Entity Too Large Error
client_max_body_size 50M;

access_log /proc/self/fd/1;
error_log /proc/self/fd/2;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
  listen 80 default_server;
  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  error_log /proc/self/fd/2;
  access_log /proc/self/fd/1;
  return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {
{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ with $address := index $container.Addresses 0 }}
       # {{$container.Name}}
       server {{ $address.IP }}:{{ $address.Port }};
    {{ end }}
  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
  {{ else if $container.Env.VIRTUAL_PORT }}
    {{ range $address := .Addresses }}
       {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
       # {{$container.Name}}
       server {{ $address.IP }}:{{ $address.Port }};
       {{ end }}
    {{ end }}
  {{/* Else default to standard web port 80 */}}
  {{ else }}
    {{ range $address := $container.Addresses }}
      {{ if eq $address.Port "80" }}
      # {{$container.Name}}
      server {{ $address.IP }}:{{ $address.Port }};
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
}

{{ with $value := index $containers 0 }}
{{ if $value.Env.REDIRECT }}
  server {
		server_name {{ $host }};
		rewrite ^/(.*) https://{{ $host }}/$1 permanent;
	}
{{ else }}
  server {
    server_name {{ $host }};
    location / {
      proxy_pass http://{{ $host }};
    }
  }
{{ end }}

# ssl support
# https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
server {
  listen 443 ssl;
  server_name {{ $host }};

  ssl_certificate /etc/nginx/certs/{{ $host }}.crt;
  ssl_certificate_key /etc/nginx/certs/{{ $host }}.key;
  ssl_session_timeout 10m;
  ssl_session_cache shared:SSL:10m;
  #ssl_session_timeout 5m;
  #ssl_session_cache shared:SSL:50m;

  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
  # ssl_dhparam /path/to/dhparam.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  ssl_prefer_server_ciphers on;

  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security max-age=15768000;

  # OCSP Stapling ---
  # fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;

  location / {
    proxy_pass http://{{ $host }};
    proxy_redirect http://{{ $host }} https://{{ $host }};
  }	
}
{{ end }}
{{ end }}